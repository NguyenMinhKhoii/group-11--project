import axiosClient from './axiosClient';
import { setTokens, clearTokens } from '../utils/tokenHelper';

// ----------------------
// üîê Auth API Functions
// ----------------------

// ƒêƒÉng k√Ω
export const signup = async (userData) => {
  try {
    const response = await axiosClient.post('/auth/signup', userData);
    return {
      success: true,
      data: response.data,
    };
  } catch (error) {
    return {
      success: false,
      message: error.response?.data?.message || 'ƒêƒÉng k√Ω th·∫•t b·∫°i',
      error: error.response?.data,
    };
  }
};

// ƒêƒÉng nh·∫≠p
export const login = async (credentials) => {
  try {
    console.log('üåê G·ª≠i request login t·ªõi:', axiosClient.defaults.baseURL + '/auth/login');
    console.log('üì§ Login data:', credentials);
    const response = await axiosClient.post('/auth/login', credentials);
    console.log('üì• Login response:', response.data);
    const { accessToken, refreshToken, user } = response.data;
    
    // L∆∞u tokens v√† user info
    setTokens(accessToken, refreshToken, user);
    
    return {
      success: true,
      data: response.data,
      user,
    };
  } catch (error) {
    return {
      success: false,
      message: error.response?.data?.message || 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i',
      error: error.response?.data,
    };
  }
};

// ƒêƒÉng xu·∫•t
export const logout = async () => {
  try {
    const refreshToken = localStorage.getItem('refresh_token');
    
    // G·ªçi API logout ƒë·ªÉ revoke refresh token
    if (refreshToken) {
      await axiosClient.post('/auth/logout', { refreshToken });
    }
    
    // X√≥a tokens kh·ªèi localStorage
    clearTokens();
    
    return {
      success: true,
      message: 'ƒêƒÉng xu·∫•t th√†nh c√¥ng',
    };
  } catch (error) {
    // V·∫´n x√≥a tokens d√π API call th·∫•t b·∫°i
    clearTokens();
    
    return {
      success: false,
      message: error.response?.data?.message || 'ƒêƒÉng xu·∫•t th·∫•t b·∫°i',
      error: error.response?.data,
    };
  }
};

// Refresh token
export const refreshToken = async (refreshTokenValue) => {
  try {
    const response = await axiosClient.post('/auth/refresh', {
      refreshToken: refreshTokenValue
    });
    
    const { accessToken, refreshToken: newRefreshToken, user } = response.data;
    
    // L∆∞u tokens m·ªõi
    setTokens(accessToken, newRefreshToken, user);
    
    return {
      success: true,
      data: response.data,
      accessToken,
      refreshToken: newRefreshToken,
    };
  } catch (error) {
    // N·∫øu refresh token th·∫•t b·∫°i, x√≥a h·∫øt tokens
    clearTokens();
    
    return {
      success: false,
      message: error.response?.data?.message || 'L√†m m·ªõi token th·∫•t b·∫°i',
      error: error.response?.data,
    };
  }
};

// Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
export const checkAuthStatus = () => {
  const accessToken = localStorage.getItem('access_token');
  const refreshToken = localStorage.getItem('refresh_token');
  const userInfo = localStorage.getItem('user_info');
  
  return {
    isAuthenticated: !!accessToken && !!refreshToken,
    accessToken,
    refreshToken,
    user: userInfo ? JSON.parse(userInfo) : null,
  };
};

// Validate current session
export const validateSession = async () => {
  try {
    // G·ªçi m·ªôt API protected ƒë·ªÉ ki·ªÉm tra session
    const response = await axiosClient.get('/auth/me'); // C·∫ßn t·∫°o endpoint n√†y
    return {
      success: true,
      user: response.data.user,
    };
  } catch (error) {
    return {
      success: false,
      message: 'Session kh√¥ng h·ª£p l·ªá',
    };
  }
};
