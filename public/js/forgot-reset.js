// Handle forgot password and reset password forms
(function (){
  const apiBase = '/api/auth'; // authRoutes exposes /forgot-password and /reset-password/:token

  function showAlert(el, msg, isError){
    // Clear previous content
    el.innerHTML = '';
    
    // Create Bootstrap alert
    const alertDiv = document.createElement('div');
    alertDiv.className = isError ? 'alert alert-danger' : 'alert alert-success';
    alertDiv.innerHTML = `
      <i class="fas ${isError ? 'fa-exclamation-triangle' : 'fa-check-circle'}"></i>
      ${msg}
    `;
    el.appendChild(alertDiv);
  }

  // Forgot form
  const forgotForm = document.getElementById('forgotForm');
  if (forgotForm) {
    forgotForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const email = document.getElementById('email').value.trim();
      const resultEl = document.getElementById('result');
      const debugEl = document.getElementById('debug');
      const submitButton = forgotForm.querySelector('button[type="submit"]');
      
      // Disable button and show loading
      submitButton.disabled = true;
      submitButton.innerHTML = '‚è≥ ƒêang g·ª≠i...';
      showAlert(resultEl, 'üì§ ƒêang g·ª≠i email reset password...', false);
      
      try {
        const resp = await fetch(apiBase + '/forgot-password', {
          method: 'POST',
          headers: { 'Content-Type':'application/json' },
          body: JSON.stringify({ email })
        });
        const data = await resp.json();
        
        if (resp.ok) {
          showAlert(resultEl, '‚úÖ ƒê√£ g·ª≠i email reset password! Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞ c·ªßa b·∫°n.', false);
          debugEl.textContent = data.resetToken ? ('Debug token: ' + data.resetToken) : (data.resetUrl || '');
          // Reset form
          forgotForm.reset();
        } else {
          showAlert(resultEl, `‚ùå ${data.message || 'L·ªói khi g·ª≠i email'}`, true);
        }
      } catch (err) {
        showAlert(resultEl, '‚ùå L·ªói k·∫øt n·ªëi. Vui l√≤ng th·ª≠ l·∫°i sau.', true);
      } finally {
        // Re-enable button
        submitButton.disabled = false;
        submitButton.innerHTML = 'üì§ G·ª≠i link ƒë·∫∑t l·∫°i';
      }
    });
  }

  // Reset form
  const resetForm = document.getElementById('resetForm');
  if (resetForm) {
    // Token may be passed in URL as /reset-password.html?token=xxx or path /reset-password/:token
    const urlParams = new URLSearchParams(window.location.search);
    const tokenFromQuery = urlParams.get('token');

    // Add password confirmation validation
    const newPasswordInput = document.getElementById('newPassword');
    const confirmPasswordInput = document.getElementById('confirmPassword');
    
    function validatePasswordMatch() {
      if (confirmPasswordInput.value && newPasswordInput.value !== confirmPasswordInput.value) {
        confirmPasswordInput.setCustomValidity('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp');
      } else {
        confirmPasswordInput.setCustomValidity('');
      }
    }
    
    newPasswordInput.addEventListener('input', validatePasswordMatch);
    confirmPasswordInput.addEventListener('input', validatePasswordMatch);

    resetForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const newPassword = document.getElementById('newPassword').value;
      const confirmPassword = document.getElementById('confirmPassword').value;
      const resultEl = document.getElementById('result');
      const submitButton = resetForm.querySelector('button[type="submit"]');
      
      // Validate password match
      if (newPassword !== confirmPassword) {
        showAlert(resultEl, '‚ùå M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!', true);
        return;
      }
      
      // Disable button and show loading
      submitButton.disabled = true;
      submitButton.innerHTML = '‚è≥ ƒêang x·ª≠ l√Ω...';
      showAlert(resultEl, 'üîÑ ƒêang ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u...', false);

      // Determine token: try query param first, otherwise extract from path
      let token = tokenFromQuery;
      console.log('üîç Debug token from query:', tokenFromQuery);
      console.log('üîç Debug full URL:', window.location.href);
      
      if (!token) {
        // If URL is /reset-password/<token> or /reset-password.html/<token>
        const pathParts = window.location.pathname.split('/').filter(Boolean);
        if (pathParts.length >= 2 && pathParts[pathParts.length-2].startsWith('reset-password')) {
          token = pathParts[pathParts.length-1];
        }
      }

      console.log('üîç Final token to use:', token);

      if (!token) {
        showAlert(resultEl, '‚ùå Kh√¥ng t√¨m th·∫•y token trong URL. Vui l√≤ng s·ª≠ d·ª•ng link t·ª´ email.', true);
        submitButton.disabled = false;
        submitButton.innerHTML = '‚úÖ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u';
        return;
      }

      try {
        const resp = await fetch(apiBase + '/reset-password/' + token, {
          method: 'POST',
          headers: { 'Content-Type':'application/json' },
          body: JSON.stringify({ newPassword, confirmPassword })
        });
        const data = await resp.json();
        
        if (resp.ok) {
          showAlert(resultEl, '‚úÖ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng! B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p b·∫±ng m·∫≠t kh·∫©u m·ªõi.', false);
          // Clear form
          resetForm.reset();
          // Redirect to login after 3 seconds
          setTimeout(() => {
            window.location.href = '/login.html';
          }, 3000);
        } else {
          showAlert(resultEl, `‚ùå ${data.message || 'L·ªói khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u'}`, true);
        }
      } catch (err) {
        showAlert(resultEl, '‚ùå L·ªói k·∫øt n·ªëi. Vui l√≤ng th·ª≠ l·∫°i sau.', true);
      } finally {
        // Re-enable button
        submitButton.disabled = false;
        submitButton.innerHTML = '‚úÖ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u';
      }
    });
  }

})();
