const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const multer = require('multer');
const path = require('path');
require('dotenv').config();

// Import models
const User = require('./models/User');

// Import Cloudinary config
const { uploadToCloudinary, deleteFromCloudinary, testCloudinaryConnection } = require('./utils/cloudinaryConfig');

const app = express();
const PORT = process.env.PORT || 5173;

// ========================
// üîß MIDDLEWARE SETUP
// ========================
app.use(cors({
    origin: ['http://localhost:3000', 'http://127.0.0.1:3000', 'http://localhost:5173', 'http://127.0.0.1:5173'],
    credentials: true
}));
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Serve static files
app.use(express.static(path.join(__dirname, '..', 'public')));
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// ========================
// üîß MULTER CONFIG FOR AVATAR UPLOAD
// ========================
const upload = multer({
    storage: multer.memoryStorage(), // L∆∞u trong RAM ƒë·ªÉ upload l√™n Cloudinary
    limits: {
        fileSize: 5 * 1024 * 1024, // 5MB max
    },
    fileFilter: (req, file, cb) => {
        const allowedTypes = ['image/jpeg', 'image/png', 'image/webp', 'image/jpg'];
        if (allowedTypes.includes(file.mimetype)) {
            cb(null, true);
        } else {
            cb(new Error('Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh (JPEG, PNG, WebP)'), false);
        }
    }
});

// ========================
// üîß JWT MIDDLEWARE
// ========================
const authenticateToken = (req, res, next) => {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
        return res.status(401).json({ 
            success: false, 
            message: 'Kh√¥ng c√≥ token, truy c·∫≠p b·ªã t·ª´ ch·ªëi' 
        });
    }

    jwt.verify(token, process.env.JWT_SECRET || 'SECRET_KEY', (err, user) => {
        if (err) {
            return res.status(403).json({ 
                success: false, 
                message: 'Token kh√¥ng h·ª£p l·ªá' 
            });
        }
        req.user = user;
        next();
    });
};

// ========================
// üîß CONNECT TO MONGODB
// ========================
const connectDB = async () => {
    try {
        await mongoose.connect(process.env.MONGO_URI || 'mongodb://localhost:27017/group11-project');
        console.log('‚úÖ MongoDB connected successfully!');
        
        // Test Cloudinary connection
        await testCloudinaryConnection();
        
    } catch (err) {
        console.error('‚ùå MongoDB connection failed:', err.message);
        process.exit(1);
    }
};

// ========================
// üîê AUTH ROUTES
// ========================

// ƒêƒÉng k√Ω
app.post('/api/auth/signup', async (req, res) => {
    try {
        const { name, email, password } = req.body;

        // Validation
        if (!name || !email || !password) {
            return res.status(400).json({
                success: false,
                message: 'T√™n, email v√† m·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc!'
            });
        }

        if (password.length < 6) {
            return res.status(400).json({
                success: false,
                message: 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!'
            });
        }

        // Ki·ªÉm tra email tr√πng
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({
                success: false,
                message: 'Email ƒë√£ t·ªìn t·∫°i!'
            });
        }

        // T·∫°o user m·ªõi (password s·∫Ω ƒë∆∞·ª£c hash t·ª± ƒë·ªông trong pre-save hook)
        const newUser = new User({
            name,
            email,
            password
        });

        await newUser.save();

        console.log('‚úÖ User registered:', email);

        res.status(201).json({
            success: true,
            message: 'ƒêƒÉng k√Ω th√†nh c√¥ng!',
            user: {
                id: newUser._id,
                name: newUser.name,
                email: newUser.email,
                role: newUser.role
            }
        });

    } catch (err) {
        console.error('‚ùå Signup error:', err);
        res.status(500).json({
            success: false,
            message: 'L·ªói server khi ƒëƒÉng k√Ω!'
        });
    }
});

// ƒêƒÉng nh·∫≠p
app.post('/api/auth/login', async (req, res) => {
    try {
        const { email, password } = req.body;

        if (!email || !password) {
            return res.status(400).json({
                success: false,
                message: 'Email v√† m·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc!'
            });
        }

        // T√¨m user theo email
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({
                success: false,
                message: 'Email kh√¥ng t·ªìn t·∫°i!'
            });
        }

        // Ki·ªÉm tra account c√≥ b·ªã kh√≥a kh√¥ng
        if (user.isLocked()) {
            return res.status(423).json({
                success: false,
                message: 'T√†i kho·∫£n b·ªã kh√≥a do ƒëƒÉng nh·∫≠p sai qu√° nhi·ªÅu l·∫ßn!'
            });
        }

        // Ki·ªÉm tra m·∫≠t kh·∫©u
        const isMatch = await user.comparePassword(password);
        if (!isMatch) {
            // TƒÉng s·ªë l·∫ßn ƒëƒÉng nh·∫≠p th·∫•t b·∫°i
            await user.incLoginAttempts();
            
            return res.status(400).json({
                success: false,
                message: 'Sai m·∫≠t kh·∫©u!'
            });
        }

        // Reset login attempts khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng
        await user.resetLoginAttempts();

        // T·∫°o JWT token
        const token = jwt.sign(
            { 
                id: user._id, 
                email: user.email,
                role: user.role 
            }, 
            process.env.JWT_SECRET || 'SECRET_KEY',
            { expiresIn: '24h' }
        );

        console.log('‚úÖ User logged in:', email);

        res.json({
            success: true,
            message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng!',
            token,
            user: {
                id: user._id,
                name: user.name,
                email: user.email,
                role: user.role,
                avatar: user.avatar || null, // üî• QUAN TR·ªåNG: Tr·∫£ v·ªÅ avatar t·ª´ database
                avatarMetadata: user.avatarMetadata || null
            }
        });

    } catch (err) {
        console.error('‚ùå Login error:', err);
        res.status(500).json({
            success: false,
            message: 'L·ªói server khi ƒëƒÉng nh·∫≠p!'
        });
    }
});

// Forgot Password
app.post('/api/auth/forgot-password', async (req, res) => {
    try {
        const { email } = req.body;

        if (!email) {
            return res.status(400).json({
                success: false,
                message: 'Email l√† b·∫Øt bu·ªôc!'
            });
        }

        // T√¨m user trong database
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(404).json({
                success: false,
                message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email n√†y!'
            });
        }

        // T·∫°o reset token
        const resetToken = jwt.sign(
            { email: user.email, id: user._id },
            process.env.JWT_SECRET || 'RESET_SECRET',
            { expiresIn: '10m' }
        );

        // L∆∞u reset token v√†o database
        user.resetToken = resetToken;
        user.resetTokenExpiry = new Date(Date.now() + 10 * 60 * 1000); // 10 ph√∫t
        await user.save();

        // Mock g·ª≠i email (hi·ªÉn th·ªã token trong console)
        console.log('üìß =================================');
        console.log(`üìß PASSWORD RESET REQUEST`);
        console.log(`üìß Email: ${email}`);
        console.log(`üìß Reset Token: ${resetToken}`);
        console.log(`üìß Reset Link: http://localhost:5173/reset-password.html?token=${resetToken}`);
        console.log('üìß =================================');

        res.json({
            success: true,
            message: 'ƒê√£ g·ª≠i link reset m·∫≠t kh·∫©u! (Ki·ªÉm tra console ƒë·ªÉ l·∫•y token)',
            email: email,
            // Trong production, kh√¥ng tr·∫£ v·ªÅ token
            debug_token: resetToken // Ch·ªâ ƒë·ªÉ test
        });

    } catch (error) {
        console.error('‚ùå Forgot password error:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói server!'
        });
    }
});

// Reset Password
app.post('/api/auth/reset-password/:token', async (req, res) => {
    try {
        const { token } = req.params;
        const { newPassword, confirmPassword } = req.body;

        if (!newPassword || !confirmPassword) {
            return res.status(400).json({
                success: false,
                message: 'M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n m·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc!'
            });
        }

        if (newPassword !== confirmPassword) {
            return res.status(400).json({
                success: false,
                message: 'M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!'
            });
        }

        if (newPassword.length < 6) {
            return res.status(400).json({
                success: false,
                message: 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!'
            });
        }

        // Verify token
        const decoded = jwt.verify(token, process.env.JWT_SECRET || 'RESET_SECRET');
        
        // T√¨m user v√† ki·ªÉm tra token
        const user = await User.findOne({
            email: decoded.email,
            resetToken: token,
            resetTokenExpiry: { $gt: Date.now() }
        });

        if (!user) {
            return res.status(400).json({
                success: false,
                message: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!'
            });
        }

        // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi (s·∫Ω ƒë∆∞·ª£c hash t·ª± ƒë·ªông)
        user.password = newPassword;
        user.resetToken = undefined;
        user.resetTokenExpiry = undefined;
        await user.save();

        console.log('‚úÖ Password reset successful for:', user.email);

        res.json({
            success: true,
            message: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!',
            user: {
                email: user.email,
                name: user.name
            }
        });

    } catch (error) {
        console.error('‚ùå Reset password error:', error);
        if (error.name === 'JsonWebTokenError') {
            return res.status(400).json({
                success: false,
                message: 'Token kh√¥ng h·ª£p l·ªá!'
            });
        }
        if (error.name === 'TokenExpiredError') {
            return res.status(400).json({
                success: false,
                message: 'Token ƒë√£ h·∫øt h·∫°n!'
            });
        }
        res.status(500).json({
            success: false,
            message: 'L·ªói server!'
        });
    }
});

// ========================
// üñºÔ∏è AVATAR ROUTES
// ========================

// Upload Avatar
app.post('/api/avatar/upload', authenticateToken, upload.single('avatar'), async (req, res) => {
    try {
        console.log('üöÄ Avatar upload request from:', req.user.email);

        // Ki·ªÉm tra file
        if (!req.file) {
            return res.status(400).json({
                success: false,
                message: 'Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c upload!'
            });
        }

        // Ki·ªÉm tra user trong database
        const user = await User.findById(req.user.id);
        if (!user) {
            return res.status(404).json({
                success: false,
                message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!'
            });
        }

        console.log('üìé File info:', {
            originalname: req.file.originalname,
            mimetype: req.file.mimetype,
            size: req.file.size
        });

        // Upload l√™n Cloudinary
        const cloudinaryResult = await uploadToCloudinary(req.file.buffer, 'avatars');

        console.log('‚òÅÔ∏è Cloudinary result:', {
            secure_url: cloudinaryResult.secure_url,
            public_id: cloudinaryResult.public_id
        });

        // X√≥a avatar c≈© n·∫øu c√≥
        if (user.avatarMetadata && user.avatarMetadata.public_id) {
            try {
                await deleteFromCloudinary(user.avatarMetadata.public_id);
                console.log('üóëÔ∏è Deleted old avatar from Cloudinary');
            } catch (deleteError) {
                console.warn('‚ö†Ô∏è Could not delete old avatar:', deleteError.message);
            }
        }

        // C·∫≠p nh·∫≠t user v·ªõi avatar m·ªõi
        user.avatar = cloudinaryResult.secure_url;
        user.avatarMetadata = {
            public_id: cloudinaryResult.public_id,
            format: cloudinaryResult.format,
            width: cloudinaryResult.width,
            height: cloudinaryResult.height,
            bytes: cloudinaryResult.bytes,
            uploaded_at: new Date()
        };

        await user.save();

        console.log('‚úÖ Avatar uploaded successfully for:', user.email);

        res.json({
            success: true,
            message: 'Upload avatar th√†nh c√¥ng!',
            user: {
                id: user._id,
                email: user.email,
                name: user.name,
                avatar: user.avatar,
                avatarMetadata: user.avatarMetadata
            }
        });

    } catch (error) {
        console.error('‚ùå Avatar upload error:', error);
        
        if (error.message.includes('File size')) {
            return res.status(400).json({
                success: false,
                message: 'File qu√° l·ªõn! K√≠ch th∆∞·ªõc t·ªëi ƒëa l√† 5MB.'
            });
        }

        res.status(500).json({
            success: false,
            message: 'L·ªói server khi upload avatar!'
        });
    }
});

// Get Avatar
app.get('/api/avatar', authenticateToken, async (req, res) => {
    try {
        const user = await User.findById(req.user.id).select('name email avatar avatarMetadata');
        
        if (!user) {
            return res.status(404).json({
                success: false,
                message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!'
            });
        }

        res.json({
            success: true,
            user: {
                id: user._id,
                name: user.name,
                email: user.email,
                avatar: user.avatar || null,
                avatarMetadata: user.avatarMetadata || null
            }
        });

    } catch (error) {
        console.error('‚ùå Get avatar error:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói server!'
        });
    }
});

// Delete Avatar
app.delete('/api/avatar', authenticateToken, async (req, res) => {
    try {
        const user = await User.findById(req.user.id);
        
        if (!user) {
            return res.status(404).json({
                success: false,
                message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!'
            });
        }

        if (!user.avatar) {
            return res.status(400).json({
                success: false,
                message: 'Ng∆∞·ªùi d√πng ch∆∞a c√≥ avatar!'
            });
        }

        // X√≥a t·ª´ Cloudinary
        if (user.avatarMetadata && user.avatarMetadata.public_id) {
            try {
                await deleteFromCloudinary(user.avatarMetadata.public_id);
                console.log('‚úÖ Avatar deleted from Cloudinary');
            } catch (deleteError) {
                console.warn('‚ö†Ô∏è Could not delete from Cloudinary:', deleteError.message);
            }
        }

        // X√≥a t·ª´ database
        user.avatar = '';
        user.avatarMetadata = {};
        await user.save();

        console.log('‚úÖ Avatar deleted for:', user.email);

        res.json({
            success: true,
            message: 'X√≥a avatar th√†nh c√¥ng!',
            user: {
                id: user._id,
                email: user.email,
                name: user.name,
                avatar: null
            }
        });

    } catch (error) {
        console.error('‚ùå Delete avatar error:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói server!'
        });
    }
});

// ========================
// üîß DEBUG ROUTES
// ========================
app.get('/api/debug/token/:token', (req, res) => {
    try {
        const { token } = req.params;
        const decoded = jwt.verify(token, process.env.JWT_SECRET || 'RESET_SECRET');
        res.json({
            success: true,
            message: 'Token h·ª£p l·ªá!',
            decoded: decoded,
            issued_at: new Date(decoded.iat * 1000),
            expires_at: new Date(decoded.exp * 1000),
            time_left: Math.max(0, decoded.exp * 1000 - Date.now()) + 'ms'
        });
    } catch (error) {
        res.status(400).json({
            success: false,
            message: 'Token kh√¥ng h·ª£p l·ªá!',
            error: error.message
        });
    }
});

// Health check
app.get('/api/health', (req, res) => {
    res.json({
        success: true,
        message: 'Server is running!',
        timestamp: new Date().toISOString(),
        mongodb: mongoose.connection.readyState === 1 ? 'connected' : 'disconnected'
    });
});

// ========================
// üîß STATIC ROUTES
// ========================
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, '..', 'index.html'));
});

app.get('/dashboard.html', (req, res) => {
    res.sendFile(path.join(__dirname, '..', 'dashboard.html'));
});

app.get('/forgot-password.html', (req, res) => {
    res.sendFile(path.join(__dirname, '..', 'forgot-password.html'));
});

app.get('/reset-password.html', (req, res) => {
    res.sendFile(path.join(__dirname, '..', 'reset-password.html'));
});

// ========================
// üöÄ START SERVER
// ========================
const startServer = async () => {
    try {
        // Connect to MongoDB first
        await connectDB();
        
        // Start Express server
        app.listen(PORT, () => {
            console.log('üöÄ =====================================');
            console.log('üöÄ MAIN SERVER WITH MONGODB + CLOUDINARY');
            console.log('üöÄ =====================================');
            console.log(`üöÄ Server running on http://localhost:${PORT}`);
            console.log('üìã Available endpoints:');
            console.log('   üîê POST /api/auth/signup');
            console.log('   üîê POST /api/auth/login');
            console.log('   üîê POST /api/auth/forgot-password');
            console.log('   üîê POST /api/auth/reset-password/:token');
            console.log('   üñºÔ∏è  POST /api/avatar/upload (JWT required)');
            console.log('   üñºÔ∏è  GET /api/avatar (JWT required)');
            console.log('   üñºÔ∏è  DELETE /api/avatar (JWT required)');
            console.log('   üîß GET /api/debug/token/:token');
            console.log('   ‚ù§Ô∏è  GET /api/health');
            console.log('üöÄ =====================================');
        });
    } catch (error) {
        console.error('‚ùå Failed to start server:', error);
        process.exit(1);
    }
};

// Handle graceful shutdown
process.on('SIGINT', async () => {
    console.log('\nüõë Shutting down server...');
    await mongoose.connection.close();
    console.log('‚úÖ MongoDB connection closed.');
    process.exit(0);
});

// Start the server
startServer();

module.exports = app;