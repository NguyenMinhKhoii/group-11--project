// Test ƒë∆°n gi·∫£n cho RefreshToken Schema - SV3
const mongoose = require("mongoose");
const dotenv = require("dotenv");
const RefreshToken = require("./models/RefreshToken");
const User = require("./models/User");
const crypto = require("crypto");

dotenv.config();

console.log("üß™ SV3: Test RefreshToken Schema - L∆∞u v√† Truy xu·∫•t\n");

// K·∫øt n·ªëi database
async function connectDB() {
  try {
    await mongoose.connect(process.env.MONGO_URI, {
      serverSelectionTimeoutMS: 10000,
    });
    console.log("‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng");
    return true;
  } catch (error) {
    console.error("‚ùå K·∫øt n·ªëi MongoDB th·∫•t b·∫°i:", error.message);
    return false;
  }
}

// Test ch√≠nh cho SV3
async function testSV3RefreshToken() {
  console.log("üìã B·∫ÆT ƒê·∫¶U TEST SV3: Schema RefreshToken v√† l∆∞u/truy xu·∫•t\n");

  try {
    // 1. Test t·∫°o User test
    console.log("1Ô∏è‚É£ T·∫°o User test...");
    const testEmail = `sv3_test_${Date.now()}@example.com`;

    let testUser = new User({
      name: "SV3 Test User",
      email: testEmail,
      password: "testpassword123",
      role: "user",
    });

    await testUser.save();
    console.log("‚úÖ User test ƒë√£ ƒë∆∞·ª£c t·∫°o v·ªõi ID:", testUser._id);

    // 2. Test t·∫°o RefreshToken b·∫±ng static method
    console.log("\n2Ô∏è‚É£ Test t·∫°o RefreshToken b·∫±ng createToken()...");
    const tokenValue = crypto.randomBytes(64).toString("hex");

    const refreshToken = await RefreshToken.createToken(
      testUser._id,
      tokenValue,
      7
    );
    console.log("‚úÖ RefreshToken ƒë√£ ƒë∆∞·ª£c t·∫°o:");
    console.log("   - Token ID:", refreshToken._id);
    console.log("   - User ID:", refreshToken.userId);
    console.log(
      "   - Token (20 k√Ω t·ª± ƒë·∫ßu):",
      refreshToken.token.substring(0, 20) + "..."
    );
    console.log("   - Ng√†y h·∫øt h·∫°n:", refreshToken.expiryDate.toISOString());
    console.log("   - ƒê√£ b·ªã revoke:", refreshToken.isRevoked);

    // 3. Test truy xu·∫•t RefreshToken t·ª´ database
    console.log("\n3Ô∏è‚É£ Test truy xu·∫•t RefreshToken t·ª´ database...");
    const foundToken = await RefreshToken.findOne({
      token: tokenValue,
    }).populate("userId");

    if (foundToken) {
      console.log("‚úÖ Truy xu·∫•t RefreshToken th√†nh c√¥ng:");
      console.log("   - T√™n User:", foundToken.userId.name);
      console.log("   - Email User:", foundToken.userId.email);
      console.log("   - Token c√≤n hi·ªáu l·ª±c:", !foundToken.isExpired());
      console.log("   - Ng√†y t·∫°o:", foundToken.createdAt.toISOString());
    } else {
      throw new Error("Kh√¥ng t√¨m th·∫•y RefreshToken");
    }

    // 4. Test verify token
    console.log("\n4Ô∏è‚É£ Test verify RefreshToken...");
    try {
      const verifiedToken = await RefreshToken.verifyToken(tokenValue);
      console.log("‚úÖ Verify token th√†nh c√¥ng:");
      console.log("   - User ƒë∆∞·ª£c verify:", verifiedToken.userId.name);
      console.log("   - Email:", verifiedToken.userId.email);
    } catch (error) {
      console.log("‚ùå Verify token th·∫•t b·∫°i:", error.message);
    }

    // 5. Test t·∫°o token h·∫øt h·∫°n
    console.log("\n5Ô∏è‚É£ Test token h·∫øt h·∫°n...");
    const expiredTokenValue = crypto.randomBytes(64).toString("hex");
    const expiredToken = new RefreshToken({
      userId: testUser._id,
      token: expiredTokenValue,
      expiryDate: new Date(Date.now() - 24 * 60 * 60 * 1000), // H·∫øt h·∫°n t·ª´ 1 ng√†y tr∆∞·ªõc
    });
    await expiredToken.save();
    console.log("‚úÖ Token h·∫øt h·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o");
    console.log("   - ƒê√£ h·∫øt h·∫°n:", expiredToken.isExpired());

    // 6. Test revoke token
    console.log("\n6Ô∏è‚É£ Test revoke RefreshToken...");
    const revokedToken = await RefreshToken.revokeToken(tokenValue);
    console.log("‚úÖ Token ƒë√£ ƒë∆∞·ª£c revoke:");
    console.log("   - Tr·∫°ng th√°i revoke:", revokedToken.isRevoked);

    // 7. Test query performance v·ªõi index
    console.log("\n7Ô∏è‚É£ Test performance query v·ªõi index...");
    const startTime = Date.now();
    const userTokens = await RefreshToken.find({ userId: testUser._id });
    const queryTime = Date.now() - startTime;
    console.log("‚úÖ Query tokens theo userId:", queryTime + "ms");
    console.log("   - S·ªë token t√¨m th·∫•y:", userTokens.length);

    // 8. Cleanup test data
    console.log("\n8Ô∏è‚É£ Cleanup test data...");
    await RefreshToken.deleteMany({ userId: testUser._id });
    await User.deleteOne({ _id: testUser._id });
    console.log("‚úÖ ƒê√£ cleanup test data");

    console.log("\nüéâ T·∫§T C·∫¢ TEST SV3 ƒê√É PASS!");
    console.log("\nüìä K·∫æT QU·∫¢ SV3:");
    console.log("   ‚úÖ Schema RefreshToken: HO√ÄN TH√ÄNH");
    console.log("   ‚úÖ L∆∞u RefreshToken: HO√ÄN TH√ÄNH");
    console.log("   ‚úÖ Truy xu·∫•t RefreshToken: HO√ÄN TH√ÄNH");
    console.log("   ‚úÖ Verify RefreshToken: HO√ÄN TH√ÄNH");
    console.log("   ‚úÖ Revoke RefreshToken: HO√ÄN TH√ÄNH");
    console.log("   ‚úÖ Performance Index: HO√ÄN TH√ÄNH");
  } catch (error) {
    console.error("‚ùå Test SV3 th·∫•t b·∫°i:", error.message);
    throw error;
  }
}

// Main execution
async function main() {
  const connected = await connectDB();
  if (!connected) {
    console.error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi database. D·ª´ng test.");
    process.exit(1);
  }

  try {
    await testSV3RefreshToken();
    console.log("\n‚úÖ Test SV3 ho√†n th√†nh th√†nh c√¥ng!");
  } catch (error) {
    console.error("\n‚ùå Test SV3 th·∫•t b·∫°i:", error.message);
  } finally {
    await mongoose.connection.close();
    console.log("üîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi database");
    process.exit(0);
  }
}

// Ch·∫°y test
if (require.main === module) {
  main().catch((error) => {
    console.error("‚ùå L·ªói ch·∫°y test SV3:", error);
    process.exit(1);
  });
}

module.exports = { testSV3RefreshToken };
