// Test file cho RefreshToken schema
const mongoose = require("mongoose");
const dotenv = require("dotenv");
const User = require("./models/User");
const RefreshToken = require("./models/RefreshToken");
const crypto = require("crypto");

dotenv.config();

// K·∫øt n·ªëi MongoDB
async function connectDB() {
  try {
    await mongoose.connect(process.env.MONGO_URI || "mongodb://localhost:27017/group11_project", {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log("‚úÖ MongoDB connected successfully");
  } catch (error) {
    console.error("‚ùå MongoDB connection failed:", error.message);
    process.exit(1);
  }
}

// Test function ch√≠nh
async function testRefreshTokenSchema() {
  console.log("üß™ B·∫Øt ƒë·∫ßu test RefreshToken Schema...\n");

  try {
    // B∆∞·ªõc 1: T·∫°o user test (n·∫øu ch∆∞a c√≥)
    console.log("1Ô∏è‚É£ T·∫°o user test...");
    let testUser = await User.findOne({ email: "test@example.com" });
    
    if (!testUser) {
      testUser = new User({
        name: "Test User",
        email: "test@example.com",
        password: "password123",
        role: "user"
      });
      await testUser.save();
      console.log("‚úÖ User test ƒë√£ ƒë∆∞·ª£c t·∫°o:", testUser._id);
    } else {
      console.log("‚úÖ User test ƒë√£ t·ªìn t·∫°i:", testUser._id);
    }

    // B∆∞·ªõc 2: Test t·∫°o RefreshToken
    console.log("\n2Ô∏è‚É£ Test t·∫°o RefreshToken...");
    const tokenValue = crypto.randomBytes(64).toString('hex');
    
    const refreshToken = await RefreshToken.createToken(testUser._id, tokenValue, 7);
    console.log("‚úÖ RefreshToken ƒë√£ ƒë∆∞·ª£c t·∫°o:");
    console.log("   - ID:", refreshToken._id);
    console.log("   - Token:", refreshToken.token.substring(0, 20) + "...");
    console.log("   - UserId:", refreshToken.userId);
    console.log("   - ExpiryDate:", refreshToken.expiryDate);
    console.log("   - IsRevoked:", refreshToken.isRevoked);

    // B∆∞·ªõc 3: Test truy xu·∫•t RefreshToken
    console.log("\n3Ô∏è‚É£ Test truy xu·∫•t RefreshToken...");
    const foundToken = await RefreshToken.findOne({ token: tokenValue }).populate('userId');
    if (foundToken) {
      console.log("‚úÖ T√¨m th·∫•y RefreshToken:");
      console.log("   - User name:", foundToken.userId.name);
      console.log("   - User email:", foundToken.userId.email);
      console.log("   - Token valid:", !foundToken.isExpired());
    }

    // B∆∞·ªõc 4: Test verify token
    console.log("\n4Ô∏è‚É£ Test verify RefreshToken...");
    try {
      const verifiedToken = await RefreshToken.verifyToken(tokenValue);
      console.log("‚úÖ Token verification th√†nh c√¥ng:");
      console.log("   - User:", verifiedToken.userId.name);
      console.log("   - Email:", verifiedToken.userId.email);
    } catch (error) {
      console.log("‚ùå Token verification th·∫•t b·∫°i:", error.message);
    }

    // B∆∞·ªõc 5: Test t·∫°o token expired
    console.log("\n5Ô∏è‚É£ Test t·∫°o token ƒë√£ h·∫øt h·∫°n...");
    const expiredTokenValue = crypto.randomBytes(64).toString('hex');
    const expiredDate = new Date();
    expiredDate.setDate(expiredDate.getDate() - 1); // H·∫øt h·∫°n t·ª´ h√¥m qua
    
    const expiredToken = new RefreshToken({
      userId: testUser._id,
      token: expiredTokenValue,
      expiryDate: expiredDate,
    });
    await expiredToken.save();
    
    console.log("‚úÖ Token h·∫øt h·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o");
    console.log("   - IsExpired:", expiredToken.isExpired());

    // B∆∞·ªõc 6: Test verify token h·∫øt h·∫°n
    console.log("\n6Ô∏è‚É£ Test verify token h·∫øt h·∫°n...");
    try {
      await RefreshToken.verifyToken(expiredTokenValue);
      console.log("‚ùå L·ªói: Token h·∫øt h·∫°n v·∫´n ƒë∆∞·ª£c accept");
    } catch (error) {
      console.log("‚úÖ Token h·∫øt h·∫°n b·ªã reject ƒë√∫ng:", error.message);
    }

    // B∆∞·ªõc 7: Test revoke token
    console.log("\n7Ô∏è‚É£ Test revoke RefreshToken...");
    const revokedToken = await RefreshToken.revokeToken(tokenValue);
    if (revokedToken) {
      console.log("‚úÖ Token ƒë√£ ƒë∆∞·ª£c revoke:");
      console.log("   - IsRevoked:", revokedToken.isRevoked);
    }

    // B∆∞·ªõc 8: Test verify token ƒë√£ revoke
    console.log("\n8Ô∏è‚É£ Test verify token ƒë√£ revoke...");
    try {
      await RefreshToken.verifyToken(tokenValue);
      console.log("‚ùå L·ªói: Token ƒë√£ revoke v·∫´n ƒë∆∞·ª£c accept");
    } catch (error) {
      console.log("‚úÖ Token ƒë√£ revoke b·ªã reject ƒë√∫ng:", error.message);
    }

    // B∆∞·ªõc 9: Test t·∫°o nhi·ªÅu token v√† revoke all
    console.log("\n9Ô∏è‚É£ Test revoke t·∫•t c·∫£ token c·ªßa user...");
    
    // T·∫°o 3 token m·ªõi
    const tokens = [];
    for (let i = 0; i < 3; i++) {
      const newTokenValue = crypto.randomBytes(64).toString('hex');
      const newToken = await RefreshToken.createToken(testUser._id, newTokenValue, 7);
      tokens.push(newToken);
    }
    console.log("‚úÖ ƒê√£ t·∫°o 3 token m·ªõi");

    // Revoke t·∫•t c·∫£ token c·ªßa user
    const revokeResult = await RefreshToken.revokeAllUserTokens(testUser._id);
    console.log("‚úÖ ƒê√£ revoke t·∫•t c·∫£ token c·ªßa user:", revokeResult.modifiedCount, "tokens");

    // Ki·ªÉm tra t·∫•t c·∫£ token ƒë√£ ƒë∆∞·ª£c revoke
    const userTokens = await RefreshToken.find({ userId: testUser._id });
    const allRevoked = userTokens.every(token => token.isRevoked);
    console.log("‚úÖ T·∫•t c·∫£ token ƒë√£ ƒë∆∞·ª£c revoke:", allRevoked);

    console.log("\nüéâ T·∫•t c·∫£ test ƒë√£ PASS! RefreshToken schema ho·∫°t ƒë·ªông ƒë√∫ng.");

  } catch (error) {
    console.error("‚ùå Test th·∫•t b·∫°i:", error);
  }
}

// Cleanup function
async function cleanup() {
  try {
    // X√≥a t·∫•t c·∫£ test data
    await RefreshToken.deleteMany({ });
    await User.deleteOne({ email: "test@example.com" });
    console.log("\nüßπ ƒê√£ cleanup test data");
  } catch (error) {
    console.error("‚ùå Cleanup th·∫•t b·∫°i:", error);
  }
}

// Main execution
async function main() {
  await connectDB();
  await testRefreshTokenSchema();
  await cleanup();
  
  console.log("\n‚úÖ Test ho√†n th√†nh. ƒê√≥ng k·∫øt n·ªëi database...");
  await mongoose.connection.close();
  process.exit(0);
}

// Ch·∫°y test
main().catch(error => {
  console.error("‚ùå L·ªói ch·∫°y test:", error);
  process.exit(1);
});
